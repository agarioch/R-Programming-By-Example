4*4
install.packages(c("ggplot2", "virdis", "corrplot", "ggbinplot", "progress"))
getwd()
setwd(/Users/Alistair/Documents/R-Progamming-By-Example)
setwd("/Users/Alistair/Documents/R-Progamming-By-Example/")
setwd("/Documents/R-Progamming-By-Example/")
setwd("/Users/Alistair/Documents/R-Progamming-By-Example/")
setwd("~/Documents/R-Progamming-By-Example/")
getwd()
setwd("Users/Alistair/Documents/R-Programming-By-Example")
setwd("/Users/Alistair/Documents/R-Programming-By-Example/")
getwd()
data <- read.csv("/Brexit/data_brexit_referendum.csv")
data <- read.csv("./Brexit/data_brexit_referendum.csv")
data[data$Leave == -1, "Leave"] <- NA
sum(is.na(data$Leave))
data$Proportion <- data$Leave / data$NVotes
data$Vote <- ifelse(data$Proportion > 0.5, "Leave", "Remain")
head(data)
data$RegionName <- as.character(data$RegionName)
data[data$RegionName == "London", "RegionName"] <- "L"
data[data$RegionName == "North West", "RegionName"] <- "NW"
data[data$RegionName == "North East", "RegionName"] <- "NE"
data[data$RegionName == "SouthWest", "RegionName"] <- "SW"
data[data$RegionName == "South West", "RegionName"] <- "SW"
data[data$RegionName == "South East", "RegionName"] <- "SE"
data[data$RegionName == "East Midlands", "RegionName"] <- "EM"
data[data$RegionName == "West Midlands", "RegionName"] <- "WM"
data[data$RegionName == "East of England", "RegionName"] <- "EE"
data[data$RegionName == "Yorkshire and The Humber", "RegionName"] <- "Y"
summary(data)
head(data[data$RegionName == "L"])
head(data[data$RegionName == "L",])
numerical_variables <- sapply(data, is.numeric)
numerical_variables
data_numerical[, numerical_variables]
data_numerical <- data[, numerical_variables]
head(data_numerical)
numerical_variables[["ID"]] <- FALSE
data_numerical <- data[, numerical_variables]
colnames(data_numerical)
lapply(data[, numerical_variables], summary)
numerical_summary <- do.call(cblind, lapply(data_numerical, summary))
numerical_summary <- do.call(cbind, lapply(data_numerical, summary))
numerical_summary
data <- data[complete.cases(data), ]
data_numerical <- data[, numerical_variables]
numerical_summary <- do.call(cbind(data_numerical, summary))
numerical_summary <- do.call(cbind, lapply(data_numerical, summary))
numerical_summary
do.call(rbind, lapply(data_numerical, summary))
numerical_summary["Max.", "Proportion"] - numerical_summary["Min.", "Proportion"]
desired_variables <- c("ID", "NoQuals", "Proportion", "AdultMeanAge", "L4Quals_plus", "RegionName")
data[which.max(data$Proportion), desired_variables]
data[which.min(data$Proportion), desired_variables]
table(data$RegionName)
prop.table(table(data$RegionName))
barplot(height= prop.table(table(data$RegionName)), main = "Vote Proportion by Region", ylab = "Frequency", col = "white")
library(ggplot2)
library(viridis)
library(viridisLite)
plot <- ggplot(data, aes(x = RegionName, y = Proportion, color = White))
plot <- plot + geom_point() + scale_color_viridis_c()
print(plot)
hist(data$NoQuals, main = "No Qualifications", xlab = "")
data[NoQuals > 50, desired_variables]
data[data$NoQuals > 50, desired_variables]
data[data$NoQuals > 45, desired_variables]
hist(data$L4Quals_plus)
hist(data$AdultMeanAge, main = "Age")
plot(x = data$NoQuals, y = data$AdultMeanAge)
plot(x = data$L4Quals_plus, y = data$AdultMeanAge)
desired_variables <- c("AdultMeanAge", "White", "Owned", "NoQuals", "L4Quals_plus", "Unemp", "HigherOccup", "Deprived", "Proportion")
pairs(data[, desired_variables])
plot <- ggplot(data, aes(x = NoQuals, y = AdultMeanAge, color = Proportion))
plot <- plot + stat_smooth(method = "lm", col = "darkgrey", se = FALSE)
plot <- plot + scale_color_viridis_c()
plot <- plot + geom_point()
print(plot)
print(plot)
create_plots_iteratively <- function(data, plot_function) {}
create_plots_iteratively <- function(data, plot_function) {
vars <- colnames(data)
vars <- vars(!which(vars == "Proportion"))
for (i in l:(length(vars) - 1)) {
for (j in (i + 1):length(vars)) {
save_to <- paste(vars[i], "_", vars[j], ".png", sep = "")
plot_function(data, vars[i], vars[j], save_to)
}
}
}
prototype_scatter_plot <- function(data, var_x, var_y, var_color = "Proportion", save_to = "") {
if (is.na(as.logical(var_color))) {
plot <- ggplot(data, aes_string(x = var_x, y = var_y, color = var_color))
} else {
plot <- ggplot(data, aes_string(x = var_x, y = var_y))
}
plot <- plot + stat_smooth(method = "lm", col = "darkgrey", se = FALSE)
plot <- plot + scale_color_viridis_c()
plot <- plot + geom_point()
if (not_empty(save_to)) png(save_to)
print(plot)
if (not_empty(save_to)) dev.off()
}
not_empty <- function(file) {
return(file != "")
}
prototype_scatter_plot(data, "L4Quals_plus", "AdultMeanAge")
create_plots_iteratively(data, prototype_scatter_plot)
create_plots_iteratively <- function(data, plot_function) {
vars <- colnames(data)
vars <- vars(!which(vars == "Proportion"))
for (i in 1:(length(vars) - 1)) {
for (j in (i + 1):length(vars)) {
save_to <- paste(vars[i], "_", vars[j], ".png", sep = "")
plot_function(data, vars[i], vars[j], save_to)
}
}
}
create_plots_iteratively(data, prototype_scatter_plot)
create_plots_iteratively <- function(data, plot_function) {
vars <- colnames(data)
vars <- vars(!which(vars == "Proportion"))
for (i in 1:(length(vars) - 1)) {
for (j in (i + 1):length(vars)) {
#save_to <- paste(vars[i], "_", vars[j], ".png", sep = "")
plot_function(data, vars[i], vars[j], "")
}
}
}
create_plots_iteratively(data, prototype_scatter_plot)
create_plots_iteratively <- function(data, plot_function) {
vars <- colnames(data)
vars <- vars(!which(vars == "Proportion"))
for (i in 1:(length(vars) - 1)) {
for (j in (i + 1):length(vars)) {
save_to <- paste(vars[i], "_", vars[j], ".png", sep = "")
plot_function(data, vars[i], vars[j], save_to)
}
}
}
create_plots_iteratively <- function(data, plot_function) {
vars <- colnames(data)
vars <- vars(!which(vars == "Proportion"))
for (i in 1:(length(vars) - 1)) {
for (j in (i + 1):length(vars)) {
save_to <- paste(vars[i], "_", vars[j], ".png", sep = "")
plot_function(data, vars[i], vars[j], save_to)
}
}
}
create_plots_iteratively(data, prototype_scatter_plot)
create_plots_iteratively(data, prototype_scatter_plot)
create_plots_iteratively(data, prototype_scatter_plot)
colnames(data)
create_plots_iteratively <- function(data, plot_function) {
vars <- colnames(data)
vars <- vars(!which(vars == "Proportion"))
for (i in 1:(length(vars) - 1)) {
for (j in (i + 1):length(vars)) {
save_to <- paste(vars[i], "_", vars[j], ".png", sep = "")
plot_function(data, vars[i], vars[j], save_to)
}
}
}
not_empty <- function(file) {
return(file != "")
}
prototype_scatter_plot <- function(data, var_x, var_y, var_color = "Proportion", save_to = "") {
if (is.na(as.logical(var_color))) {
plot <- ggplot(data, aes_string(x = var_x, y = var_y, color = var_color))
} else {
plot <- ggplot(data, aes_string(x = var_x, y = var_y))
}
plot <- plot + stat_smooth(method = "lm", col = "darkgrey", se = FALSE)
plot <- plot + scale_color_viridis_c()
plot <- plot + geom_point()
if (not_empty(save_to)) png(save_to)
print(plot)
if (not_empty(save_to)) dev.off()
}
create_plots_iteratively(data, prototype_scatter_plot)
create_plots_iteratively <- function(data, plot_function) {
vars <- colnames(data)
vars <- vars[!which(vars == "Proportion")]
for (i in 1:(length(vars) - 1)) {
for (j in (i + 1):length(vars)) {
save_to <- paste(vars[i], "_", vars[j], ".png", sep = "")
plot_function(data, vars[i], vars[j], save_to)
}
}
}
create_plots_iteratively(data, prototype_scatter_plot)
create_plots_iteratively <- function(data, plot_function) {
vars <- colnames(data)
vars <- vars[!which(vars == "Proportion"),]
for (i in 1:(length(vars) - 1)) {
for (j in (i + 1):length(vars)) {
save_to <- paste(vars[i], "_", vars[j], ".png", sep = "")
plot_function(data, vars[i], vars[j], save_to)
}
}
}
create_plots_iteratively(data, prototype_scatter_plot)
create_plots_iteratively <- function(data, plot_function) {
vars <- colnames(data)
vars <- vars[!which(vars == "Proportion")]
for (i in 1:(length(vars) - 1)) {
for (j in (i + 1):length(vars)) {
save_to <- paste(vars[i], "_", vars[j], ".png", sep = "")
plot_function(data, vars[i], vars[j], save_to)
}
}
}
create_plots_iteratively(data, prototype_scatter_plot)
create_plots_iteratively <- function(data, plot_function) {
vars <- colnames(data)
vars <- vars(!which(vars == "Proportion"))
for (i in 1:(length(vars) - 1)) {
for (j in (i + 1):length(vars)) {
save_to <- paste(vars[i], "_", vars[j], ".png", sep = "")
plot_function(data, vars[i], vars[j], save_to)
}
}
}
create_plots_iteratively(data, prototype_scatter_plot)
#vars <- vars(!which(vars == "Proportion"))
for (i in 1:(length(vars) - 1)) {
for (j in (i + 1):length(vars)) {
save_to <- paste(vars[i], "_", vars[j], ".png", sep = "")
plot_function(data, vars[i], vars[j], save_to)
}
}
create_plots_iteratively <- function(data, plot_function) {
vars <- colnames(data)
#vars <- vars(!which(vars == "Proportion"))
for (i in 1:(length(vars) - 1)) {
for (j in (i + 1):length(vars)) {
save_to <- paste(vars[i], "_", vars[j], ".png", sep = "")
plot_function(data, vars[i], vars[j], save_to)
}
}
}
create_plots_iteratively(data, prototype_scatter_plot)
create_plots_iteratively <- function(data, plot_function) {
vars <- colnames(data)
vars <- vars(!which(vars == "Proportion"))
for (i in 1:(length(vars) - 1)) {
for (j in (i + 1):length(vars)) {
save_to <- paste(vars[i], "_", vars[j], ".png", sep = "")
plot_function(data, vars[i], vars[j], save_to)
}
}
}
create_plots_iteratively(data, prototype_scatter_plot)
colnames(data)
vars.test <- colnames(data)
vars.test <- vars.test(!which(vars.test == "Proportion"))
vars.test <- vars.test[!which(vars.test == "Proportion")]
vars.test
vars.test
print(vars.test)
vars.test[!which(vars.test == "Proportion")]
vars.test <- colnames(data)
vars.test
vars.test[!which(vars.test == "Proportion")]
vars.test[,!which(vars.test == "Proportion")]
vars.test[which(vars.test != "Proportion")]
create_plots_iteratively <- function(data, plot_function) {
vars <- colnames(data)
vars <- vars[which(vars != "Proportion")]
for (i in 1:(length(vars) - 1)) {
for (j in (i + 1):length(vars)) {
save_to <- paste(vars[i], "_", vars[j], ".png", sep = "")
plot_function(data, vars[i], vars[j], save_to)
}
}
}
create_plots_iteratively(data, prototype_scatter_plot)
create_plots_iteratively <- function(data, plot_function) {
vars <- colnames(data)
vars <- vars[which(vars != "Proportion")]
for (i in 1:(length(vars) - 1)) {
for (j in (i + 1):length(vars)) {
#save_to <- paste(vars[i], "_", vars[j], ".png", sep = "")
plot_function(data, vars[i], vars[j], save_to)
}
}
}
create_plots_iteratively(data, prototype_scatter_plot)
create_plots_iteratively <- function(data, plot_function) {
vars <- colnames(data)
vars <- vars[which(vars != "Proportion")]
for (i in 1:(length(vars) - 1)) {
for (j in (i + 1):length(vars)) {
#save_to <- paste(vars[i], "_", vars[j], ".png", sep = "")
plot_function(data, vars[i], vars[j])
}
}
}
create_plots_iteratively(data, prototype_scatter_plot)
prototype_scatter_plot(data, "Proportion", "Unemp")
